plugins {
    id 'com.github.johnrengelman.shadow'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    include implementation("net.jodah:typetools:0.6.3")

    //Serene Seasons
    modImplementation("maven.modrinth:serene-seasons:${project.serene_seasons_version}-fabric") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    modImplementation("maven.modrinth:glitchcore:${project.glitchcore_version}-fabric") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    //Xaero's Minimap
    modCompileOnly("maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_Fabric_1.21") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    //JourneyMap
    modCompileOnlyApi group: 'info.journeymap', name: 'journeymap-api-fabric', version: project.journeymap_api_version_fabric, changing: true
    modCompileOnly("maven.modrinth:journeymap:1.21-${project.journeymap_version}+fabric") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    //FTB Chunks + Dependencies
    modCompileOnly("curse.maven:ftb-chunks-fabric-472657:${project.ftb_chunks_fabric_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    modCompileOnly("curse.maven:ftb-library-fabric-438495:${project.ftb_library_fabric_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    modCompileOnly("curse.maven:ftb-teams-fabric-438497:${project.ftb_teams_fabric_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    modCompileOnly("maven.modrinth:architectury-api:${project.architectury_version}+fabric") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    //Trinkets + Accessories
    modCompileOnly("dev.emi:trinkets:${project.trinkets_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
    modCompileOnly "org.ladysnake.cardinal-components-api:cardinal-components-base:6.1.0"
    modCompileOnly "org.ladysnake.cardinal-components-api:cardinal-components-entity:6.1.0"

    modLocalRuntime("io.wispforest:accessories-fabric:${project.accessories_version}")

    modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }


    //Forge Config API Port
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.forge_config_api_port_version}"
    modImplementation("maven.modrinth:forge-config-api-port:v${project.forge_config_api_port_version}-${project.minecraft_version}-Fabric") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") {
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }

    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    // Minimap Mod Dev Tests
    // See root gradle.properties to choose which to use at runtime.
    switch (project.minimap_mod.toLowerCase(Locale.ROOT)) {
        case "xaero":
            modLocalRuntime("maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_Fabric_1.21")
            break
        case "journey":
            modLocalRuntime("maven.modrinth:journeymap:1.21-${project.journeymap_version}+fabric")
            break
        case "ftb":
            modLocalRuntime("curse.maven:ftb-chunks-fabric-472657:${project.ftb_chunks_fabric_version}")
            modLocalRuntime("curse.maven:ftb-library-fabric-438495:${project.ftb_library_fabric_version}")
            modLocalRuntime("curse.maven:ftb-teams-fabric-438497:${project.ftb_teams_fabric_version}")
            modLocalRuntime("maven.modrinth:architectury-api:${project.architectury_version}+fabric")
            break
        case "atlas":
            break
        case "none":
            break
        default: println("Unknown recipe viewer specified: ${project.minimap_mod}. Must be xaero, journey, ftb, " +
                "atlas, or none")
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

modrinth {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_fabric_id
    versionNumber = minecraft_version + "-" + version
    versionName = base.archivesName.get() + "-" + version
    versionType = "release"
    uploadFile = remapJar

    List<String> mcVersions = modrinth_gameVersions.split(",")
    gameVersions = mcVersions
    loaders = ["fabric"]

    changelog = recentChangelogText

    dependencies {
        required.project "fabric-seasons"
        optional.project "fabric-seasons-extras"
        required.project "forge-config-api-port"
        optional.project "journeymap"
        optional.project "trinkets"
        optional.project "xaeros-minimap"
        optional.project "xaeros-minimap-fair"
        optional.project "map-atlases"
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_fabric_id, remapJar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    List<String> mcVersions = curseforge_gameVersions.split(",")
    mainFile.gameVersions = mcVersions
    mainFile.addGameVersion("Fabric")
    mainFile.addGameVersion("Java 21")

    mainFile.addRequirement("fabric-seasons")
    mainFile.addRequirement("forge-config-api-port-fabric")
    mainFile.addOptional("fabric-seasons-extras")
    mainFile.addOptional("ftb-chunks-fabric")
    mainFile.addOptional("journeymap")
    mainFile.addOptional("trinkets")
    mainFile.addOptional("xaeros-minimap")
    mainFile.addOptional("xaeros-minimap-fair-play-edition")
    mainFile.addOptional("map-atlases")
}

task publishFabric {
    group = "publishing"
    afterEvaluate {
        dependsOn(tasks.publishCurseForge)
        dependsOn(tasks.modrinth)
    }
}