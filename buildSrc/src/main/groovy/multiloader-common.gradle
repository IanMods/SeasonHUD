plugins {
    id 'java-library'
    id 'maven-publish'
}

version = mod_version
group = mod_group

base {
    archivesName = "${mod_id}-${project.name}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
}

repositories {
    mavenCentral()
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com'
    }

    maven {
        name = 'Forge'
        url = "https://maven.minecraftforge.net"
    }

    maven {
        name = "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }

    maven {
        name = "JourneyMap (Public)"
        url = "https://jm.gserv.me/repository/maven-public/"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
        capability("$group:$mod_id:$version")
    }
    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant)
    }
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

processResources {
    def expandProps = [
            "version"                      : mod_version,
            "group"                        : project.group, //Else we target the task's group.
            "minecraft_version"            : minecraft_version,
            "forge_version"                : forge_version,
            "forge_loader_version_range"   : forge_loader_version_range,
            "forge_version_range"          : forge_version_range,
            "minecraft_version_range"      : minecraft_version_range,
            "fabric_version"               : fabric_version,
            "fabric_loader_version"        : fabric_loader_version,
            "mod_name"                     : mod_name,
            "mod_author"                   : mod_author,
            "mod_id"                       : mod_id,
            "license"                      : license,
            "description"                  : project.description,
            "neoforge_version"             : neoforge_version,
            "neoforge_version_range"       : neoforge_version_range,
            "neoforge_loader_version_range": neoforge_loader_version_range,
            "glitchcore_version"           : glitchcore_version,
            "journeymap_api_version"       : journeymap_api_version,
            "credits"                      : credits,
            "java_version"                 : java_version
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand project.properties
    }
    inputs.properties(expandProps)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            version project.version
            artifact jar
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}
