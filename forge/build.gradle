plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.1.18'
    id "com.modrinth.minotaur" version "2.+"
}

base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
//    mappings channel: mapping_channel, version: "${mapping_version}-${minecraft_version}"

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    /Serene Seasons/
    implementation "curse.maven:serene-seasons-291874:${project.serene_seasons_file_id}"
    implementation "curse.maven:serene-seasons-291874:${project.serene_seasons_deobf_file_id}"

    /Curios/
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_file_id}:api")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_file_id}")


    /Xaero's Minimap/
    compileOnly fg.deobf("curse.maven:xaeros-minimap-263420:${project.xaeros_forge_file_id}")

    /Xaero's Minimap Fair Play/
//    compileOnly fg.deobf("curse.maven:xaeros-minimap-fair-play-edition-263466:${project.xaeros_fairplay_forge_file_id}")

    /FTB Chunks/
    //FTB Library
    compileOnly fg.deobf("curse.maven:ftb-library-forge-404465:${project.ftb_lib_forge_file_id}")
    //Architectury
    compileOnly fg.deobf("curse.maven:architectury-api-419699:${project.architectury_forge_file_id}")
    //FTB Teams
    compileOnly fg.deobf("curse.maven:ftb-teams-forge-404468:${project.ftb_teams_forge_file_id}")
    //FTB Chunks
    compileOnly fg.deobf("curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_forge_file_id}")

    /JourneyMap/
    compileOnly fg.deobf("curse.maven:journeymap-32274:${project.journeymap_forge_file_id}")

    /Map Atlases/
    compileOnly fg.deobf("curse.maven:map-atlases-forge-519759:${project.map_atlases_forge_file_id}")
//    compileOnly fg.deobf("curse.maven:selene-499980:4843863")
//    compileOnly fg.deobf("curse.maven:supplementaries-412082:4823730")
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            fg.component(it)
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

modrinth {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_forge_id
    versionNumber = minecraft_version + "-" + version
    versionName = base.archivesName.get() + "-" + mod_version
    versionType = "release"
    uploadFile = jar

    List<String> mcVersions = modrinth_gameVersions.split(",")
    gameVersions = mcVersions
    loaders = ["forge"]

    changelog = recentChangelogText

    dependencies {
        required.project "serene-seasons"
        optional.project "curios"
        optional.project "journeymap"
        optional.project "xaeros-minimap"
        optional.project "xaeros-minimap-fair"
        optional.project "map-atlases"
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_forge_id, jar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    List<String> mcVersions = curseforge_gameVersions.split(",")
    mainFile.gameVersions = mcVersions
    mainFile.addGameVersion("Forge")
    mainFile.addGameVersion("Java 17")

    mainFile.addRequirement("serene-seasons")
    mainFile.addOptional("curios")
    mainFile.addOptional("ftb-chunks-forge")
    mainFile.addOptional("journeymap")
    mainFile.addOptional("xaeros-minimap")
    mainFile.addOptional("xaeros-minimap-fair-play-edition")
    mainFile.addOptional("map-atlases-forge")
}