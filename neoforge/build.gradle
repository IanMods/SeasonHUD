plugins {
    id 'com.github.johnrengelman.shadow'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    //Serene Seasons
    modImplementation "maven.modrinth:serene-seasons:${project.serene_seasons_version}-neoforge"
    modImplementation "maven.modrinth:glitchcore:${project.glitchcore_version}-neoforge"

    //Xaero's Minimap
    modCompileOnly "maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_NeoForge_1.21"

    //JourneyMap
    modCompileOnlyApi group: 'info.journeymap', name: 'journeymap-api-neoforge', version: project.journeymap_api_version_fabric, changing: true
    modCompileOnly "maven.modrinth:journeymap:1.21-${project.journeymap_version}+neoforge"

    //FTB Chunks + Dependencies
    modCompileOnly "curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_neoforge_version}"
    modCompileOnly "curse.maven:ftb-library-forge-404465:${project.ftb_library_neoforge_version}"
    modCompileOnly "curse.maven:ftb-teams-forge-404468:${project.ftb_teams_neoforge_version}"
    modCompileOnly "maven.modrinth:architectury-api:${project.architectury_version}+neoforge"

    //Curios + Accessories
    modCompileOnly("io.wispforest:accessories-neoforge:${project.accessories_version}")
    modCompileOnly("me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") { transitive = false }

    // Minimap Mod Dev Tests
    // See root gradle.properties to choose which to use at runtime.
    switch (project.minimap_mod.toLowerCase(Locale.ROOT)) {
        case "xaero":
            modLocalRuntime "maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}_NeoForge_1.21"
            break
        case "journey":
            modLocalRuntime "maven.modrinth:journeymap:1.21-${project.journeymap_version}+neoforge"
            break
        case "ftb":
            modLocalRuntime "curse.maven:ftb-chunks-forge-314906:${project.ftb_chunks_neoforge_version}"
            modLocalRuntime "curse.maven:ftb-library-forge-404465:${project.ftb_library_neoforge_version}"
            modLocalRuntime "curse.maven:ftb-teams-forge-404468:${project.ftb_teams_neoforge_version}"
            modLocalRuntime "maven.modrinth:architectury-api:${project.architectury_version}+neoforge"
            break
        case "atlas":
            break
        case "none":
            break
        default: println("Unknown recipe viewer specified: ${project.minimap_mod}. Must be xaero, journey, ftb, " +
                "atlas, or none")
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

String changelogText = projectDir.toPath().getParent().resolve("CHANGELOG.md").getText('UTF-8')

modrinth {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_forge_id
    versionNumber = minecraft_version + "-" + version
    versionName = base.archivesName.get() + "-" + mod_version
    versionType = "release"
    uploadFile = remapJar

    List<String> mcVersions = modrinth_gameVersions.split(",")
    gameVersions = mcVersions
    loaders = ["neoforge"]

    changelog = recentChangelogText

    dependencies {
        required.project "serene-seasons"
        optional.project "curios"
        optional.project "journeymap"
        optional.project "xaeros-minimap"
        optional.project "xaeros-minimap-fair"
        optional.project "map-atlases"
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    int firstHeading = changelogText.indexOf("## [")
    int nextHeading = changelogText.indexOf("## [", firstHeading + 1)
    String recentChangelogText = changelogText.substring(firstHeading, nextHeading)

    debugMode = false
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforge_forge_id, remapJar)
    mainFile.changelogType = "markdown"
    mainFile.changelog = recentChangelogText
    mainFile.releaseType = "release"

    List<String> mcVersions = curseforge_gameVersions.split(",")
    mainFile.gameVersions = mcVersions
    mainFile.addGameVersion("NeoForge")
    mainFile.addGameVersion("Java 21")

    mainFile.addRequirement("serene-seasons")
    mainFile.addOptional("curios")
    mainFile.addOptional("ftb-chunks-forge")
    mainFile.addOptional("journeymap")
    mainFile.addOptional("xaeros-minimap")
    mainFile.addOptional("xaeros-minimap-fair-play-edition")
    mainFile.addOptional("map-atlases-forge")
}